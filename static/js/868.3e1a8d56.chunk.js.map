{"version":3,"file":"static/js/868.3e1a8d56.chunk.js","mappings":"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","sources":["Redux/Contacts/Selectors.jsx","webpack://Contact-Management-Platform/./src/pages/PhonebookPage/PhoneBook.module.css?a623","webpack://Contact-Management-Platform/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://Contact-Management-Platform/./src/components/ContactList/ContactList.module.css?1ce0","helpers/randomColor.jsx","webpack://Contact-Management-Platform/./src/components/EditingModal/ContactForm.module.css?fdb1","components/EditingModal/EditingModal.jsx","components/ContactList/ContactList.jsx","webpack://Contact-Management-Platform/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/PhonebookPage/PhonebookPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectModalIsOpen = state => state.contacts.openModal;\n\nexport const selectdataUpdatedContact = state =>\n  state.contacts.dataUpdatedContact;\n\nexport const selectUpdateContactId = state => state.contacts.updateContactId;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n        contact.number.includes(filter)\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"PhoneTitle\":\"PhoneBook_PhoneTitle__ECFZU\",\"ContactTitle\":\"PhoneBook_ContactTitle__f-ZAa\",\"wrap\":\"PhoneBook_wrap__gw5n-\",\"container\":\"PhoneBook_container__LWY+E\",\"content\":\"PhoneBook_content__1QyaI\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactInput\":\"ContactForm_contactInput__z6XOX\",\"contactButton\":\"ContactForm_contactButton__jSKp4\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'Redux/Contacts/Operations';\nimport { selectContacts } from 'Redux/Contacts/Selectors';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const contacts = useSelector(selectContacts);\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const newContact = { name, number, id: nanoid() };\n\n    if (newContact.name.trim() === '') {\n      return alert('Enter your name');\n    }\n    const repeatingNumber = contacts.find(\n      value => value.number === newContact.number\n    );\n\n    const repeatingName = contacts.find(\n      value =>\n        value.name.toLowerCase().trim() === newContact.name.toLowerCase().trim()\n    );\n\n    if (repeatingNumber) {\n      return toast.success(\n        `Number: ${newContact.number} is already in contacts`,\n        {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: 'light',\n        }\n      );\n    }\n    if (repeatingName) {\n      return toast.success(`${newContact.name} is already in contacts`, {\n        position: 'top-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'light',\n      });\n    }\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  return (\n    <form onSubmit={onSubmit} className={css.contactForm}>\n      <input\n        className={css.contactInput}\n        onChange={handleChange}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter contact name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={name}\n        required\n      />\n      <input\n        className={css.contactInput}\n        onChange={handleChange}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter your number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={number}\n        required\n      />\n      <button className={css.contactButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactLButton\":\"ContactList_contactLButton__ZvESi\",\"sortButton\":\"ContactList_sortButton__IUlD3\",\"randomButton\":\"ContactList_randomButton__wvrV+\",\"sortIcon\":\"ContactList_sortIcon__H7h1D\",\"randomIcon\":\"ContactList_randomIcon__tdq97\",\"phoneIcon\":\"ContactList_phoneIcon__k1Asa\",\"contactFirstLetter\":\"ContactList_contactFirstLetter__i649N\",\"contactWrapp\":\"ContactList_contactWrapp__VYl+D\",\"contactMdlBtn\":\"ContactList_contactMdlBtn__NXAt1\",\"contactButtons\":\"ContactList_contactButtons__PWMGw\"};","export default function getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modalForm\":\"ContactForm_modalForm__vGbAQ\",\"modalInput\":\"ContactForm_modalInput__UIkoY\",\"modalButtonEdit\":\"ContactForm_modalButtonEdit__e97DT\",\"contactButton\":\"ContactForm_contactButton__v9tVo\",\"modalButtonClose\":\"ContactForm_modalButtonClose__qHD43\",\"buttons\":\"ContactForm_buttons__MNsdj\"};","// import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  // addContact,\n  closeModal,\n  updateContact,\n} from 'Redux/Contacts/Operations';\nimport {\n  selectdataUpdatedContact,\n  selectUpdateContactId,\n} from 'Redux/Contacts/Selectors';\n// import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport function EditingModal() {\n  const dispatch = useDispatch();\n\n  const id = useSelector(selectUpdateContactId);\n\n  const data = useSelector(selectdataUpdatedContact);\n\n  const [name, setName] = useState(data.name);\n  const [number, setNumber] = useState(data.number);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const newContact = { name, number, id };\n\n    console.log(newContact);\n    if (newContact.name.trim() === '') {\n      return alert('Enter your name');\n    }\n\n    dispatch(updateContact(newContact));\n    reset();\n  };\n\n  return (\n    <form onSubmit={onSubmit} className={css.modalForm}>\n      <h2>Edit your contact:</h2>\n      <input\n        className={css.modalInput}\n        onChange={handleChange}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter changed name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={name}\n        required\n      />\n      <input\n        className={css.modalInput}\n        onChange={handleChange}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter changed phone\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={number}\n        required\n      />\n      <div className={css.buttons}>\n        <button className={css.modalButtonEdit} type=\"submit\">\n          Edit contact\n        </button>\n        <button\n          onClick={() => {\n            dispatch(closeModal());\n          }}\n          className={css.modalButtonClose}\n          type=\"button\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport getRandomColor from 'helpers/randomColor';\nimport { useState } from 'react';\nimport { FaUserEdit } from 'react-icons/fa';\n\nimport {\n  selectModalIsOpen,\n  selectUpdateContactId,\n  selectVisibleContacts,\n} from 'Redux/Contacts/Selectors';\nimport { ImSortAlphaAsc, ImSortAlphaDesc } from 'react-icons/im';\nimport { FaRandom } from 'react-icons/fa';\nimport { FiPhoneCall } from 'react-icons/fi';\n\nimport {\n  deleteContact,\n  sortContactAscend,\n  sortContactDescend,\n  openModal,\n  sortContactRandom,\n} from 'Redux/Contacts/Operations';\nimport { EditingModal } from 'components/EditingModal/EditingModal';\n\nconst ContactList = () => {\n  const [sortAscending, setSortAscending] = useState(true);\n  const openedModal = useSelector(selectModalIsOpen);\n  const dispatch = useDispatch();\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const modal = useSelector(selectModalIsOpen);\n\n  const selectedContactId = useSelector(selectUpdateContactId);\n\n  const toggleSort = () => {\n    if (sortAscending) {\n      dispatch(sortContactAscend());\n      setSortAscending(false);\n    } else {\n      dispatch(sortContactDescend());\n      setSortAscending(true);\n    }\n  };\n\n  const backgroundColor = id => {\n    if (id === selectedContactId && modal) {\n      return {\n        backgroundColor: 'red',\n      };\n    } else return { backgroundColor: 'transparent' };\n  };\n\n  return (\n    <>\n      {!openedModal && (\n        <>\n          <button onClick={toggleSort} type=\"button\" className={css.sortButton}>\n            {sortAscending ? (\n              <ImSortAlphaAsc className={css.sortIcon} />\n            ) : (\n              <ImSortAlphaDesc className={css.sortIcon} />\n            )}\n          </button>\n\n          <button\n            onClick={() => {\n              dispatch(sortContactRandom());\n            }}\n            type=\"button\"\n            className={css.randomButton}\n          >\n            <FaRandom className={css.randomIcon} />\n          </button>\n        </>\n      )}\n\n      {modal && <EditingModal />}\n      <ul className={css.contactList}>\n        {visibleContacts.map(({ id, name, number }) => (\n          <li style={backgroundColor(id)} className={css.contactItem} key={id}>\n            <div\n              style={{ backgroundColor: getRandomColor() }}\n              className={css.contactFirstLetter}\n            >\n              {name.slice(0, 1).toUpperCase()}\n            </div>\n            {name} : {number}\n            <div className={css.contactWrapp}>\n              <div className={css.contactButtons}>\n                <button\n                  className={css.contactMdlBtn}\n                  onClick={() => {\n                    dispatch(openModal({ id, name, number }));\n                  }}\n                >\n                  <FaUserEdit />\n                </button>\n                <a className={css.contactLink} href={`tel:${number}`}>\n                  <FiPhoneCall className={css.phoneIcon} />\n                </a>\n                <button\n                  className={css.contactLButton}\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(deleteContact(id));\n                  }}\n                >\n                  Delete\n                </button>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './Filter.module.css';\nimport { filterContact } from '../../Redux/Contacts/FilterSlice';\nimport { selectFilter } from '../../Redux/Contacts/Selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const onFilterChange = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  return (\n    <input\n      className={css.filterInput}\n      type=\"text\"\n      name=\"filter\"\n      onChange={onFilterChange}\n      value={filter}\n    />\n  );\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectModalIsOpen,\n  selectVisibleContacts,\n} from '../../Redux/Contacts/Selectors';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport css from '../PhonebookPage/PhoneBook.module.css';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport { fetchContacts } from '../../Redux/Contacts/Operations';\nimport { useEffect } from 'react';\n\nimport Spinner from '../../components/Spinner/Spinner';\n\nexport default function PhonebookPage() {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const loading = useSelector(selectIsLoading);\n  const openedModal = useSelector(selectModalIsOpen);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ToastContainer />\n      <div className={css.content}>\n        <div className={css.wrap}>\n          {loading && <Spinner />}\n          <div className={css.container}>\n            {!openedModal && (\n              <>\n                <ContactForm />\n                <h2 className={css.ContactTitle}>Contacts</h2>\n                <Filter />\n              </>\n            )}\n            {visibleContacts.length > 0 ? (\n              <ContactList />\n            ) : (\n              <p>You don't have contacts, add them above👆 </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectModalIsOpen","openModal","selectdataUpdatedContact","dataUpdatedContact","selectUpdateContactId","updateContactId","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","number","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","useSelector","_useState3","_useState4","setNumber","dispatch","useDispatch","handleChange","e","_e$currentTarget","currentTarget","value","_jsxs","onSubmit","preventDefault","newContact","id","nanoid","trim","alert","repeatingNumber","find","repeatingName","toast","concat","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","addContact","className","css","children","_jsx","onChange","type","placeholder","pattern","title","required","getRandomColor","color","i","Math","floor","random","EditingModal","data","console","log","updateContact","onClick","closeModal","sortAscending","setSortAscending","openedModal","visibleContacts","modal","selectedContactId","backgroundColor","_Fragment","sortContactAscend","sortContactDescend","ImSortAlphaAsc","ImSortAlphaDesc","sortContactRandom","FaRandom","map","_ref","style","slice","toUpperCase","FaUserEdit","href","FiPhoneCall","deleteContact","filterContact","target","PhonebookPage","loading","useEffect","fetchContacts","ToastContainer","Spinner","Filter","length","ContactList"],"sourceRoot":""}